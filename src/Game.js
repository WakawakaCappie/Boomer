// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ.
// –ò–ª–∏ –º–æ–∂–Ω–æ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å,
// –∞ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤—Å–µ –Ω—É–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –ø—Ä—è–º–æ –∏–∑ run.js –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ new Game().

const Hero = require('./game-models/Hero');
const Enemy = require('./game-models/Enemy');
const Boomerang = require('./game-models/Boomerang');
const View = require('./View');
const keypress = require('keypress');



// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∏–≥—Ä—ã.
// –¢—É—Ç –±—É–¥—É—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –ø—Ä–æ–≤–µ—Ä–∫–∏, –∑–∞–ø—É—Å–∫.


class Game {
  #keyboard = {
    a: (hero, boomer) => {hero.moveLeft()},// boomer.moveLeft()},
    d: (hero, boomer) => {hero.moveRight()},// boomer.moveRight()},
    w: (hero ) => {hero.moveUp()},
    s: (hero) => {hero.moveDown()},
    r: (hero, position) => {hero.attack()},
      // hero.boomerang.isActive = true;
      //  position.boomerang.position = this.hero.position + 1 
    
    // t: () => console.log('t'),
    // y: () => console.log('y'),
  };
  constructor({ trackLength }) {
    this.trackLength = trackLength;
    this.hero = new Hero(new Boomerang()); // –ì–µ—Ä–æ—é –º–æ–∂–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –ø–µ—Ä–µ–¥–∞—Ç—å –±—É–º–µ—Ä–∞–Ω–≥.
    this.enemy = new Enemy();
    this.track = [];
    this.regenerateTrack();
    this.view = new View();
    this.score = 0;
    this.renderSpeed = 500;
  }

  regenerateTrack() {
    // –°–±–æ—Ä–∫–∞ –≤—Å–µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ (–≥–µ—Ä–æ–π, –≤—Ä–∞–≥(–∏), –æ—Ä—É–∂–∏–µ)
    // –≤ –µ–¥–∏–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    this.track = (new Array());
    this.track1 = (new Array(30)).fill('üå≤');
    this.track7 = (new Array(30)).fill('üå≤');
    this.track[this.hero.boomerang.position] = this.hero.boomerang.skin;
    this.track[this.hero.position] = this.hero.skin;
    this.track[this.enemy.position] = this.enemy.skin;
    this.track[0] = 'üè°'
    this.track[this.trackLength] = '‚õ©'
    
  }

  check() {
    if (this.hero.position === this.enemy.position || this.hero.position === this.enemy.position +1 ) {
      this.hero.die();
    }
    else if (this.hero.boomerang.position === this.enemy.position && this.hero.boomerang.isActive === true || this.hero.boomerang.position +1 === this.enemy.position && this.hero.boomerang.isActive === true){
      this.hero.boomerang.isActive = false;
      this.enemy.die();
      // this.renderSpeed += Math.floor(Math.random()*100);
      this.score += 1;
      this.enemy = new Enemy();
      this.renderSpeed -= 100
      this.hero.boomerang.afterKill = true;
    }
    else if ( this.hero.boomerang.position <= this.hero.position){
      this.hero.boomerang.afterKill = false;
      this.hero.boomerCount +=1
      this.hero.boomerang.position = undefined;
    }
    else if (this.enemy.position < 0){
      this.enemy = new Enemy();
      this.renderSpeed += Math.floor(Math.random()*100);
    }
    else if (this.hero.boomerang.position === this.trackLength){
      this.hero.boomerang.isActive = false;
      this.hero.boomerang.afterKill = true;
    }


  }

  play() {
    this.runInteractiveConsole();
    setInterval(() => {
      // Let's play!
      this.check();
      this.enemy.moveLeft();
      this.hero.boomerang.fly();
      // console.log(this.hero.position);
      // console.log(this.enemy.position);
      // console.log(this.enemy);
      this.regenerateTrack();
      this.view.render(this.track,this.track1,this.track7,this.score,this.hero.boomerCount,this.enemy.enemySpeed);
    }, this.renderSpeed);

  }

  runInteractiveConsole() {
    keypress(process.stdin);
    process.stdin.on('keypress', (ch, key) => {
      if (key) {
        // –í—ã–∑—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ.
        if (key.name in this.#keyboard) {
          this.#keyboard[key.name](this.hero)//)//this.hero.boomerang);
        }
        // –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.
        if (key.ctrl && key.name === 'c') {
          process.exit();
        }
      }
    });
    process.stdin.setRawMode(true);
  }

}

module.exports = Game;
